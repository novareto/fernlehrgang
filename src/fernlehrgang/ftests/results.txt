======
Ablauf
======

:Test-Layer: functional

Dieser Doctest soll mal zeigen wie ein Ablauf eines Fernlehrgangs aussehen könnte...


Setup
-----

Zunächst müssen wir erneut eine Instanz von unserer Application anlegen,
uma alle Utilities zur Verfügung zu haben.

   >>> from fernlehrgang.app import FernlehrgangApp
   >>> from z3c.saconfig import Session
   >>> root = getRootFolder()
   >>> root['app'] = app = FernlehrgangApp()
   

Einrichten des Fernlehrgangs
----------------------------

   >>> from fernlehrgang.models import Fernlehrgang, Lehrheft, Frage

   >>> import datetime
   >>> beginn = datetime.date(2016, 01, 01)
   >>> ende = datetime.date(2016, 12, 31)

   >>> flg09 = Fernlehrgang(jahr="2016", titel="Fernlehrgang", typ="4",
   ...                      beschreibung="Beschreibung", beginn=beginn, ende=ende)    

   >>> flg10 = Fernlehrgang(jahr="2016", titel="Fernlehrgang", typ="1",
   ...                      beschreibung="Beschreibung", beginn=beginn, ende=ende)    

   >>> lheft1 = Lehrheft(nummer=1)
   >>> lheft2 = Lehrheft(nummer=2)

   >>> frage1 = Frage(frage=1, antwortschema="ab", gewichtung=1)

   >>> lheft1.fragen.append(frage1) 

   >>> flg09.lehrhefte.append(lheft1)

   >>> session = Session()
   >>> session.add(flg09)
   >>> session.add(flg10)
   >>> import transaction; transaction.commit()

    

Einrichten der Benutzer
-----------------------

   >>> from fernlehrgang.models import Unternehmen, Teilnehmer

   >>> session = Session()
   >>> unt1 = Unternehmen(mnr="0000-00025", name="Novareto")
   >>> unt2 = Unternehmen(mnr="0000-00026", name="Econtec")

   >>> teil1 = Teilnehmer(name="Lars Walther", passwort="passwort")
   >>> teil2 = Teilnehmer(name="Bernd Probst")
   >>> teil3 = Teilnehmer(name="MaxMustermann", passwort="MMPasswort")

   >>> unt1.teilnehmer.append(teil1)
   >>> unt2.teilnehmer.append(teil2)
   >>> unt1.teilnehmer.append(teil3)


Einrichten von Kursteilnehmern und von Antwortbögen
---------------------------------------------------

   >>> from fernlehrgang.models import Kursteilnehmer, Antwort
   >>> kt1 = Kursteilnehmer()
   >>> kt2 = Kursteilnehmer()
   >>> kt3 = Kursteilnehmer()

   >>> flg = session.query(Fernlehrgang).get(1)
   >>> flg.kursteilnehmer.append(kt1)
   >>> flg.kursteilnehmer.append(kt2)

   >>> flg = session.query(Fernlehrgang).get(2)
   >>> flg.kursteilnehmer.append(kt3)
   >>> import transaction; transaction.commit()

   >>> session = Session()
   >>> flg = session.query(Fernlehrgang).get(1)
   >>> kut1, kut2 = flg.kursteilnehmer

   >>> flg = session.query(Fernlehrgang).get(2)
   >>> kut3 = flg.kursteilnehmer

   >>> kut1.teilnehmer = teil1
   >>> kut2.teilnehmer = teil2
   >>> kut3.teilnehmer = teil3

   >>> import transaction; transaction.commit()


Antwort  
-------
  
   
   >>> from fernlehrgang.interfaces.resultate import ICalculateResults
   >>> from fernlehrgang.interfaces.kursteilnehmer import IVLWKursteilnehmer
   
   >>> from z3c.saconfig import Session
   >>> session = Session()
   >>> from fernlehrgang import models
   >>> ktn1 = session.query(models.Kursteilnehmer).get(kt1.id)   
   
   >>> IVLWKursteilnehmer.providedBy(ktn1)
   True

   >>> results = ICalculateResults(ktn1)
   >>> results
   <fernlehrgang.browser.ergebnisse.CalculateResultsVLW object at ...>
   
   >>> results.summary()
   {'comment': 'Nicht Bestanden (Noch keine Antwort aus der VLW)', 'resultpoints': 0, 'points': 0}
  
   >>> antwort = models.Antwort(lehrheft_id=lheft1.id, frage_id=frage1.id, gbo="OK")
   >>> ktn1.antworten.append(antwort) 

   >>> antwort.datum
   
   >>> res = results.summary()
   >>> res
   {'comment': 'Bestanden', 'resultpoints': 0, 'points': 0}

   >>> ktn1.fixed_results is res['comment']
   True

Branchen und Gruppen
====================

Branche: ja
Gruppe: G2

   >>> ktn1.branche, ktn1.un_klasse
   (None, None)
      
   >>> ktn1.branche = "ja"
   >>> ktn1.un_klasse = "G2"

   >>> results = ICalculateResults(ktn1)
   >>> res = results.summary()
   >>> res
   {'comment': u'Nicht Bestanden, da noch kein Abschlussseminar besucht wurde.', 'resultpoints': 0, 'points': 0}

Branche: ja
Gruppe: G3 

   >>> ktn1.un_klasse = "G3"
   >>> results = ICalculateResults(ktn1)
   >>> res = results.summary()
   >>> res
   {'comment': u'Nicht Bestanden, da das Abschlussgespr\xe4ch noch nicht gef\xfchrt wurde.', 'resultpoints': 0, 'points': 0}

Branche: nein 
Gruppe: G2

   >>> ktn1.branche = "nein"
   >>> ktn1.un_klasse = "G2"

   >>> results = ICalculateResults(ktn1)
   >>> res = results.summary()
   >>> res
   {'comment': u'Nicht Bestanden, da das Abschlussgespr\xe4ch noch nicht gef\xfchrt wurde.', 'resultpoints': 0, 'points': 0}

Branche: nein 
Gruppe: G3

   >>> ktn1.un_klasse = "G3"
   >>> results = ICalculateResults(ktn1)
   >>> res = results.summary()
   >>> res
   {'comment': 'Bestanden', 'resultpoints': 0, 'points': 0}
