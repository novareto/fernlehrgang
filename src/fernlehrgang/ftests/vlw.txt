======
Ablauf
======

:Test-Layer: functional

Dieser Doctest soll mal zeigen wie ein Ablauf eines Fernlehrgangs aussehen könnte...


Setup
-----

Zunächst müssen wir erneut eine Instanz von unserer Application anlegen,
uma alle Utilities zur Verfügung zu haben.

   >>> from fernlehrgang.app import FernlehrgangApp
   >>> from z3c.saconfig import Session
   >>> root = getRootFolder()
   >>> root = {}
   >>> root['app'] = app = FernlehrgangApp()
   

Einrichten des Fernlehrgangs
----------------------------

   >>> from fernlehrgang.models import Fernlehrgang, Lehrheft, Frage

   >>> import datetime
   >>> beginn = datetime.date(2016, 1, 1)
   >>> ende = datetime.date(2016, 12, 31)

   >>> flg09 = Fernlehrgang(jahr="2016", titel="Fernlehrgang", typ="4",
   ...                      beschreibung="Beschreibung", beginn=beginn, ende=ende)    

   >>> flg10 = Fernlehrgang(jahr="2016", titel="Fernlehrgang", typ="1",
   ...                      beschreibung="Beschreibung", beginn=beginn, ende=ende)    
   
   >>> fortbildung = Fernlehrgang(jahr="2016", titel="Fortbildung", typ="3",
   ...                      beschreibung="Beschreibung", beginn=beginn, ende=ende)    

   >>> lheft1 = Lehrheft(nummer=1)
   >>> lheft2 = Lehrheft(nummer=2)

   >>> frage1 = Frage(frage=1, antwortschema="ab", gewichtung=1)

   >>> lheft1.fragen.append(frage1) 

   >>> flg09.lehrhefte.append(lheft1)

   >>> session = Session()
   >>> session.add(flg09)
   >>> session.add(flg10)
   >>> session.add(fortbildung)
   >>> import transaction; transaction.commit()

    

Einrichten der Benutzer
-----------------------

   >>> from fernlehrgang.models import Unternehmen, Teilnehmer

   >>> session = Session()
   >>> unt1 = Unternehmen(mnr="0000-00025", name="Novareto")
   >>> unt2 = Unternehmen(mnr="0000-00026", name="Econtec")

   >>> teil1 = Teilnehmer(name="Lars Walther", passwort="passwort", anrede=1)
   >>> teil2 = Teilnehmer(name="Bernd Probst", anrede=1)
   >>> teil3 = Teilnehmer(name="MaxMustermann", passwort="MMPasswort", anrede=1)
   >>> teil4 = Teilnehmer(name="Hans Meier", passwort="passwort", anrede=1)

   >>> unt1.teilnehmer.append(teil1)
   >>> unt2.teilnehmer.append(teil2)
   >>> unt1.teilnehmer.append(teil3)
   >>> unt1.teilnehmer.append(teil4)


Einrichten von Kursteilnehmern und von Antwortbögen
---------------------------------------------------

   >>> from fernlehrgang.models import Kursteilnehmer, Antwort
   >>> kt1 = Kursteilnehmer()
   >>> kt1.status = "A1"
   >>> kt2 = Kursteilnehmer()
   >>> kt2.status = "A1"
   >>> kt3 = Kursteilnehmer()
   >>> kt3.status = "A1"
   >>> kt4 = Kursteilnehmer()
   >>> kt4.status = "Z1"
   >>> kt5 = Kursteilnehmer()
   >>> kt5.status = "A1"

   >>> flg = session.query(Fernlehrgang).get(1)
   >>> flg.kursteilnehmer.append(kt1)
   >>> flg.kursteilnehmer.append(kt2)
   >>> flg.kursteilnehmer.append(kt4)

   >>> flg = session.query(Fernlehrgang).get(2)
   >>> flg.kursteilnehmer.append(kt3)

   >>> fortbildung = session.query(Fernlehrgang).get(3)
   >>> fortbildung.kursteilnehmer.append(kt5)

   >>> import transaction; transaction.commit()



   >>> session = Session()
   >>> flg = session.query(Fernlehrgang).get(1)
   >>> kut1, kut2, kut4 = flg.kursteilnehmer

   >>> flg = session.query(Fernlehrgang).get(2)
   >>> kut3 = flg.kursteilnehmer

   >>> kut1.teilnehmer = teil1
   >>> kut2.teilnehmer = teil2
   >>> kut3.teilnehmer = teil3
   >>> kut4.teilnehmer = teil4

   >>> import transaction; transaction.commit()


REST-Interface Teilnehmer
-------------------------

Create a browser and visit the instance you just created:

   >>> teil1.id
   1

   >>> teil1.passwort
   'passwort'

   >>> from zope.testbrowser.wsgi import Browser
   >>> from zope.app.publication.httpfactory import HTTPPublicationRequestFactory
   >>> from zope.app import wsgi
   >>> #db =  root._p_jar.db()
   >>> from megrok.nozodb.utils import config, NOZODBWSGIPublisherApplication
   >>> #wsgi_app = wsgi.WSGIPublisherApplication( db, HTTPPublicationRequestFactory, True)
   >>> wsgi_app = NOZODBWSGIPublisherApplication(True)
   >>> import zope.testbrowser.wsgi
   
   >>> app = zope.testbrowser.wsgi.AuthorizationMiddleware(wsgi_app)
   >>> browser = Browser(wsgi_app=app)
   >>> browser.handleErrors = False
   >>> data = {'teilnehmer_id': teil1.id, 'passwort': teil1.passwort}
   >>> data
   {'teilnehmer_id': 1, 'passwort': 'passwort'}

Anmeldung OK 

   >>> import simplejson
   >>> browser.open('http://localhost/++skin++vlw/app/checkAuth', data=simplejson.dumps(data))   
   >>> browser.contents
   b'{"teilnehmer_id": 1, "gbo": false, "erfolgreich": "true", "muss_stammdaten_ergaenzen": "true"}'
  

Anmeldung kein VLW

   >>> data = {'teilnehmer_id': teil3.id, 'passwort': teil3.passwort}
   >>> data
   {'teilnehmer_id': 2, 'passwort': 'MMPasswort'}
   >>> browser.open('http://localhost/++skin++vlw/app/checkAuth', data=simplejson.dumps(data))   
   >>> browser.contents
   b'{"teilnehmer_id": 2, "gbo": false, "erfolgreich": "false", "muss_stammdaten_ergaenzen": "true"}'

Anmeldung kein VLW

   >>> data = {'teilnehmer_id': '98989898', 'passwort': 'passwort'}
   >>> browser.open('http://localhost/++skin++vlw/app/checkAuth', data=simplejson.dumps(data))   
   Traceback (most recent call last):
   ...
   HTTPError: HTTP Error 404: Not Found
   >>> browser.headers['status']
   '404 Not Found'
 
Anmeldung Falsches PW
   
   >>> data = {'teilnehmer_id': teil1.id, 'passwort': teil1.passwort}
   >>> data
   {'teilnehmer_id': 1, 'passwort': 'passwort'}
   >>> data['passwort']='WRONG'
   >>> browser.open('http://localhost/++skin++vlw/app/checkAuth', data=simplejson.dumps(data))   
   >>> browser.contents
   b'{"teilnehmer_id": 1, "gbo": false, "erfolgreich": "false", "muss_stammdaten_ergaenzen": "true"}'

Anmeldung Falscher Status
   
   >>> print(teil4.name)
   Hans Meier
   >>> data = {'teilnehmer_id': teil4.id, 'passwort': teil4.passwort}
   >>> data
   {'teilnehmer_id': 3, 'passwort': 'passwort'}
   >>> browser.open('http://localhost/++skin++vlw/app/checkAuth', data=simplejson.dumps(data))   
   >>> browser.contents
   b'{"teilnehmer_id": 3, "gbo": false, "erfolgreich": "false", "muss_stammdaten_ergaenzen": "true"}'


Get Teilneher --> Teilnehmer nicht vorhanden
   
   >>> data = {'teilnehmer_id': 9898989}
   >>> browser.open('http://localhost/++skin++vlw/app/getTeilnehmer', data=simplejson.dumps(data))
   Traceback (most recent call last):
   ...
   HTTPError: HTTP Error 404: Not Found

   >>> browser.headers['status']
   '404 Not Found'

   >>> data = {'teilnehmer_id': teil1.id}
   >>> browser.open('http://localhost/++skin++vlw/app/getTeilnehmer', data=simplejson.dumps(data))
   >>> browser.contents
   b'{"teilnehmer_id": 1, "name": "Lars Walther", "vorname": null, "geburtsdatum": "None", "email": "None", "telefon": "None", "unternehmen": "Novareto", "kurse": [{"kursteilnehmer_id": 1, "fernlehrgang_id": 116, "titel": "Fernlehrgang", "jahr": "2016", "bestanden": false}], "un_klasse": null, "branche": null}'
   
   >>> data = {'teilnehmer_id': teil1.id, 'name': 'Klinger', 'vorname': 'Christian'}
   >>> data
   {'teilnehmer_id': 1, 'name': 'Klinger', 'vorname': 'Christian'}
  
   >>> import json 
   >>> browser.post('http://localhost/++skin++vlw/app/setTeilnehmer', data=json.dumps(data))
   >>> print(browser.headers['Status'])
   200 Ok
   >>> print(browser.contents)
   b'{"muss_stammdaten_ergaenzen": "true"}'
 
   >>> daten = {
   ...   'teilnehmer_id': '1',
   ...    'name': 'Klinger', 
   ...    'vorname': 'Christian', 
   ...    'email': 'ck@novareto.de', 
   ...    'telefon': '09841/3644', 
   ...    'un_klasse': 'G3', 
   ...    'branche': 'nein'}
 
   >>> browser.post('http://localhost/++skin++vlw/app/setTeilnehmer', data=json.dumps(daten))
   >>> print(browser.headers['Status'])
   200 Ok
   >>> print(browser.contents)
   b'{"muss_stammdaten_ergaenzen": "false"}'

   >>> browser.open('http://localhost/++skin++vlw/app/getTeilnehmer', data=simplejson.dumps(data))
   >>> browser.contents
   b'{"teilnehmer_id": 1, "name": "Klinger", "vorname": "Christian", "geburtsdatum": "None", "email": "ck@novareto.de", "telefon": "09841/3644", "unternehmen": "Novareto", "kurse": [{"kursteilnehmer_id": 1, "fernlehrgang_id": 116, "titel": "Fernlehrgang", "jahr": "2016", "bestanden": false}], "un_klasse": "G3", "branche": "nein"}'

Antwort  
-------
  
   
   >>> from fernlehrgang.interfaces.resultate import ICalculateResults
   >>> from fernlehrgang.interfaces.kursteilnehmer import IVLWKursteilnehmer
   
   >>> from z3c.saconfig import Session
   >>> session = Session()
   >>> from fernlehrgang import models
   >>> ktn1 = session.query(models.Kursteilnehmer).get(kt1.id)   
   
   >>> IVLWKursteilnehmer.providedBy(ktn1)
   True

   >>> results = ICalculateResults(ktn1)
   >>> results
   <fernlehrgang.browser.ergebnisse.CalculateResultsVLW object at ...>
   
   >>> results.summary()
   {'points': 0, 'resultpoints': 0, 'comment': "<b> <span class='text-danger'> nicht bestanden (VLW noch nicht vollständig bearbeitet) </span> </b> "}
  
   >>> antwort = models.Antwort(lehrheft_id=lheft1.id, frage_id=frage1.id, gbo="OK")
   >>> ktn1.antworten.append(antwort) 

   >>> antwort.datum
   
   >>> results.summary()
   {'points': 0, 'resultpoints': 0, 'comment': "<b> <span class='text-success'> bestanden </span> </b> "}

Passwort Ändern
---------------

   >>> session = Session()
   >>> tn = session.query(models.Teilnehmer).get(1)
   >>> tn.passwort
   'passwort'

   >>> daten = {
   ...   'teilnehmer_id': '1',
   ...    'passwort': 'NeuesPasswort'}
 
   >>> browser.post('http://localhost/++skin++vlw/app/setTeilnehmer', data=json.dumps(daten))
   >>> print(browser.headers['Status'])
   200 Ok

   >>> session = Session()
   >>> tn = session.query(models.Teilnehmer).get(1)
   >>> tn.passwort
   'NeuesPasswort'


Teilnehmer hat einen Eintrag in der GBO?

   >>> data
   {'teilnehmer_id': 1, 'name': 'Klinger', 'vorname': 'Christian'}

   >>> import simplejson
   >>> browser.open('http://localhost/++skin++vlw/app/hasGBO', data=simplejson.dumps(data))   
   >>> simplejson.loads(browser.contents)
   {'teilnehmer_id': 1, 'gbo': False}


Zertifikate
-----------

   >>> from base64 import b64decode
   >>> browser.open('http://localhost/++skin++vlw/app/getCertificate', data={'kursteilnehmer_id': '1'})
   >>> pdf = browser.contents 
   >>> len(pdf) > 1
   True
   >>> pdf = b64decode(browser.contents)
   >>> 'PDF'.encode('utf-8') in pdf
   True


   >>> session = Session()
   >>> flg = session.query(Fernlehrgang).get(3)
   >>> ktn, = flg.kursteilnehmer
   >>> ktn.teilnehmer = teil4
   >>> import transaction; transaction.commit()
   >>> browser.open('http://localhost/++skin++vlw/app/getCertificate', data={'kursteilnehmer_id': ktn.id})
   >>> pdf = b64decode(browser.contents)
   >>> 'PDF'.encode('utf-8') in pdf
   True
