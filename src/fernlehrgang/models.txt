Testen des Datenbankschemas
===========================

:Test-Layer: functional

Zunächst müssen wir erneut eine Instanz von unserer Application anlegen,
uma alle Utilities zur Verfügung zu haben.

   >>> from fernlehrgang.app import FernlehrgangApp
   >>> root = getRootFolder()
   >>> root['app'] = app = FernlehrgangApp()

Für unsere Tests brauchen wir auch das Session Objekt:

   >>> from z3c.saconfig import Session
   >>> session = Session()



Fernlehrgang
------------

Wir starten mit einer Instanz vom Fernlehrgang; diesen werden wir dann DB-Technisch durchtesten.

   >>> import datetime
   >>> beginn = datetime.date(2010,01,01)
   >>> ende = datetime.date(2010,12,31)

   >>> from fernlehrgang.models import Fernlehrgang
   >>> fernlehrgang = Fernlehrgang(jahr=2009, titel='Fernlehrgang', 
   ...                               beschreibung='Beschreibugn', beginn=beginn, ende=ende)

Zuerst prüfen wir ob wir schon Fernlehrgänge in der Datenbank haben.

   >>> int(session.query(Fernlehrgang).count())
   0

Ok wir haben noch keinen Fernlehrgang in unserer Datenbank; legen wir einen an.

   >>> session.add(fernlehrgang)

Wir sollten nun einen Fernlehrgang in der DB haben:

   >>> int(session.query(Fernlehrgang).count())
   1

Wenn wir gezielt nach unseren Fernlehrgang suchen sollten wir erneut unsere Instanz bekommen.

   >>> fernlehrgang = session.query(Fernlehrgang).one()
   >>> fernlehrgang
   <Fernlehrgang(id='...', jahr='2009', titel='Fernlehrgang')>
   >>> import transaction; transaction.commit() 

Unternehmen
-----------

Als Basis für den Fernlehrgang dienen Unternehmen, diese werden zur Teilnahme am 
Fernlehrgang angeschrieben. Anschließend können die Unternehmen Mitarbeiter (Personen)
benennen die für das Unternehmen am Fernlehrgang teilnehmen...

   >>> from fernlehrgang.models import Unternehmen
   >>> novareto = Unternehmen(mnr = "0000-00025", name = "Novareto")
   >>> novareto
   <Unternehmen(mnr='0000-00025')>

Normalerweise sollten wir keine Unternehmen in der Datenbank haben:

   >>> session = Session()
   >>> int(session.query(Unternehmen).count())
   0

Speichern wir nun die Instanz novareto in die Datenbank:

   >>> session.add(novareto)

Wir können nun nachsehen ob wir *** novareto *** auch finden.

   >>> session.query(Unternehmen).one()
   <Unternehmen(mnr='0000-00025')>


Teilnehmer
----------

Diese Teilnehmer werden mit Ihrer *ID* schon beim Initiallauf angelegt.

   >>> from fernlehrgang.models import Teilnehmer
   >>> lars = Teilnehmer(name='Lars Walther')
   >>> lars
   <Teilnehmer(id='None', name='Lars Walther')>

Auch hier sollte die Datenbank noch keine Einträge für Teilnehmer haben:

   >>> session = Session()
   >>> int(session.query(Teilnehmer).count())
   0

Speichern wir den Teilnehmer lars:

   >>> session.add(lars)

Nun sollten wir auch die Instanz von lars aus der Datenbank bekommen.

   >>> session.query(Teilnehmer).one()
   <Teilnehmer(id='1', name='Lars Walther')>


   >>> import transaction; transaction.commit()


Kursteilnehmer
--------------

Der Kursteilnehmer ist nun eine Kombination aus Unternehmen und Teilnehmer.
Der Kursteilnehmer hängt unter dem Fernlehrgang und stellt somit das Paar zwischen
Unternehmen und Teilnehmer dar. D. h. alle aktiven User für den Fernlehrgang sind 
Kursteilnehmer.

Zunächst erzeugen wir eine Instanz eines Kursteilnehmers

   >>> from fernlehrgang.models import Kursteilnehmer
   >>> ktn = Kursteilnehmer(teilnehmer_id=1)
   >>> ktn
   <Kursteilnehmer(id='None', fernlehrgangid='None')>

Diese Instanz legen wir anschließend unterhalb des Fernlehrgangs an!

   >>> session = Session
   >>> fernlehrgang = session.query(Fernlehrgang).first()

   >>> fernlehrgang.kursteilnehmer.append(ktn)
   >>> import transaction; transaction.commit()

Nun greifen wir erneut den Fernlehrgang ab und suchen gezielt nach unseren 
Kursteilnehmer

   >>> fernlehrgang = session.query(Fernlehrgang).first()
   >>> ktn = fernlehrgang.kursteilnehmer[0]
   >>> ktn
   <Kursteilnehmer(id='1', fernlehrgangid='1')>


und natürlich den Teilnehmer selbst.

   >>> ktn.teilnehmer
   <Teilnehmer(id='1', name='Lars Walther')>


Lehrhefte für den Fernlehrgang
------------------------------

Nun können wir für unseren Fernlehrgang Verschiedene Lehrhefte anlegen.

   >>> session = Session()
   >>> fernlehrgang = session.query(Fernlehrgang).one()
   >>> from fernlehrgang.models import Lehrheft
   >>> lehrheft1 = Lehrheft(nummer=1)
   >>> lehrheft1
   <Lehrgang(id='None', nummer='1', fernlehrgangid='None')>

   >>> lehrheft2 = Lehrheft(nummer=2)
   >>> lehrheft2
   <Lehrgang(id='None', nummer='2', fernlehrgangid='None')>
   
Diese Lehrhefte können wir jetzt unserem Fernlehrgang zuweisen

   >>> fernlehrgang.lehrhefte.append(lehrheft1)
   >>> fernlehrgang.lehrhefte.append(lehrheft2)

   >>> import transaction; transaction.commit() 

Um die Session sauber zu haben machenn wir mal einen Commit. Wir sollten dann
alle Referenzen auf die Objekte bekommen.

   >>> session = Session()
   >>> fernlehrgang = session.query(Fernlehrgang).one()
   >>> fernlehrgang
   <Fernlehrgang(id='...', jahr='2009', titel='Fernlehrgang')>

   >>> lehrheft = fernlehrgang.lehrhefte[0]

   >>> from fernlehrgang.models import Frage
   >>> frage = Frage(frage=1, antwortschema="abac")
   >>> frage
   <Frage(id='None', frage='1', antwort='abac')>

   >>> lehrheft.fragen.append(frage)

   >>> import transaction; transaction.commit() 


XML-Export
----------

   >>> from fernlehrgang.export import IXMLExport
   >>> exporter = IXMLExport(fernlehrgang)
   >>> print exporter.createXML()




Cleaning
--------

   >>> session = Session()
   >>> from fernlehrgang.models import Base
   >>> mt = Base.metadata
   >>> mt.bind = session.connection().engine
   >>> mt
   MetaData(Engine(...))

   >>> mt.drop_all()
